confsetsize = 100, plotty = F, report = T,
fitfunction = "lm")
#Select the best model: stepwise, backwise and both of them with glmulti function
FDiv_glmulti = glmulti(FDiv ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC ,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "lm")
FDiv_glmulti
#Select the best model: stepwise, backwise and both of them with glmulti function
FDiv_glmulti = glmulti(FDiv ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC ,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "lm")
#Select the best model: stepwise, backwise and both of them with glmulti function
FDiv_glmulti = glmulti(FDiv ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC ,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "glm")
# Obtain the best models (aic + 2)
best_models2_glm = weightable(FDiv_glmulti)
best_models2_glm = tmp[tmp$aic <= min(tmp$aic) + 2,]
best_models2_glm
# Check the best model to obtain beta, SE, and p value
summary(FDiv_glmulti@objects[[1]])
# Check relationships between FRic and other variables
FRicLM_AGC <- lm(FRic ~ AGC, data = df_var)
summary(FRicLM_AGC)
FRicLM_Cnratio <- lm(FRic ~ Cnratio, data = df_var)
summary(FRicLM_Cnratio)
FRicLM_Pmgkg <- lm(FRic ~ Pmgkg, data = df_var)
summary(FRicLM_Pmgkg)
FRicLM_PCA1_temp <- lm(FRic ~ PCA1_temp, data = df_var)
summary(FRicLM_PCA1_temp)
FRicLM_minDHr <- lm(FRic ~ minDHr, data = df_var)
summary(FRicLM_minDHr)
# Run the complete model
FRicLM_all <- lm(FRic ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC, data = df_var)
# Check the adjustment of the complete model
summary(FRicLM_all)
coef(FRicLM_all)
car::vif(FRicLM_all)
# Plot results of the complete linear regression model
par(mfrow = c(2, 2))
plot(FRicLM_all)
# Obtain predicted values and residuals, and some tests
FRicLM_all_residual <- residuals(FRicLM_all)
FRicLM_all_preds <- predict(FRicLM_all)
pearson.test(FRicLM_all_residual)
lillie.test(FRicLM_all_residual)
lmtest::bptest(FRicLM_all)
search <- step(FRicLM_all, ~.^2)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(FRicLM_all_residual ~ FRicLM_all_preds, xlab = "Predicted Values",  ylab = "Residuals")
# Select the best model: stepwise, backwise and both of them with stepAIC function
FRicLM_all_best_model <- stepAIC(FRicLM_all, direction = c("both", "backward", "forward"))
# Test null model of linear model
FRic_nullLM <- lm(FRic ~ 1, data = df_var)
summary(FRic_nullLM)
stepAIC(FRic_nullLM)
# Run the generalized linear model with FRic ~ Cnratio + PCA1_temp + AGC
FRicGLM_all <- glm(FRic ~ Cnratio + PCA1_temp + AGC, data = df_var,
family = gaussian())
summary(FRicGLM_all)
# Plot results of the complete general linear regression model
par(mfrow = c(2, 2))
plot(FRicGLM_all)
# Obtain predicted values and residuals, and some tests
residuals_FRicglm <- residuals(FRicGLM_all)
preds_FRicglm <- predict(FRicGLM_all)
pearson.test(residuals_FRicglm)
lillie.test(residuals_FRicglm)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(residuals_FRicglm ~ preds_FRicglm, xlab = "Predicted Values",  ylab = "Residuals")
#Select the best model: stepwise, backwise and both of them with glmulti function
FRic_glmulti = glmulti(FRic ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC ,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "glm")
# Obtain the best models (aic + 2)
best_models3_glm = weightable(FRic_glmulti)
best_models3_glm = tmp[tmp$aic <= min(tmp$aic) + 2,]
# Check the best model to obtain beta, SE, and p value
summary(FRic_glmulti@objects[[1]])
# Run the complete model
FDisLM_all <- lm(FDis ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC, data = df_var)
# Check the adjustment of the complete model
summary(FDisLM_all)
coef(FDisLM_all)
car::vif(FDisLM_all)
# Plot results of the complete linear regression model
par(mfrow = c(2, 2))
plot(FDisLM_all)
# Obtain predicted values and residuals, and some tests
FDisLM_all_residual <- residuals(FDisLM_all)
FDisLM_all_preds <- predict(FDisLM_all)
pearson.test(FDisLM_all_residual)
lillie.test(FDisLM_all_residual)
lmtest::bptest(FDisLM_all)
search <- step(FDisLM_all, ~.^2)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(FDisLM_all_residual ~ FDisLM_all_preds, xlab = "Predicted Values",  ylab = "Residuals")
# Select the best model: stepwise, backwise and both of them with stepAIC function
FDisLM_all_best_model <- stepAIC(FDisLM_all, direction = c("both", "backward", "forward"))
# Test null model of linear model
FDis_nullLM <- lm(FDis ~ 1, data = df_var)
summary(FDis_nullLM)
stepAIC(FDis_nullLM)
# Run the generalized linear model with FDis ~ Cnratio + PCA1_temp + AGC
FDisGLM_all <- glm(FDis ~ Cnratio + PCA1_temp + AGC, data = df_var,
family = gaussian())
summary(FDisGLM_all)
# Plot results of the complete general linear regression model
par(mfrow = c(2, 2))
plot(FDisGLM_all)
# Obtain predicted values and residuals, and some tests
residuals_FDisglm <- residuals(FDisGLM_all)
preds_FDisglm <- predict(FDisGLM_all)
pearson.test(residuals_FDisglm)
lillie.test(residuals_FDisglm)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(residuals_FDisglm ~ preds_FDisglm, xlab = "Predicted Values",  ylab = "Residuals")
#Select the best model: stepwise, backwise and both of them with glmulti function
FDis_glmulti = glmulti(FDis ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC ,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "glm")
# Obtain the best models (aic + 2)
best_models4_glm = weightable(FDis_glmulti)
best_models4_glm = tmp[tmp$aic <= min(tmp$aic) + 2,]
# Check the best model to obtain beta, SE, and p value
summary(FDis_glmulti@objects[[1]])
# Run the complete model
HillDivLM_all <- lm(FDis ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC, data = df_var)
# Check the adjustment of the complete model
summary(FDisLM_all)
# Check the adjustment of the complete model
summary(HillDivLM_all)
coef(HillDivLM_all)
car::vif(HillDivLM_all)
# Plot results of the complete linear regression model
par(mfrow = c(2, 2))
plot(HillDivLM_all)
# Obtain predicted values and residuals, and some tests
HillDivLM_all_residual <- residuals(HillDivLM_all)
HillDivLM_all_preds <- predict(HillDivLM_all)
pearson.test(HillDivLM_all_residual)
lillie.test(HillDivLM_all_residual)
lmtest::bptest(HillDivLM_all)
search <- step(HillDivLM_all, ~.^2)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(HillDivLM_all_residual ~ HillDivLM_all_preds, xlab = "Predicted Values",  ylab = "Residuals")
# Select the best model: stepwise, backwise and both of them with stepAIC function
HillDivLM_all_best_model <- stepAIC(HillDivLM_all, direction = c("both", "backward", "forward"))
# Test null model of linear model
HillDiv_nullLM <- lm(FDis ~ 1, data = df_var)
summary(HillDiv_nullLM)
stepAIC(HillDiv_nullLM)
# Run the complete model
HillDivLM_all <- lm(Hill_Diversity ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC, data = df_var)
# Check the adjustment of the complete model
summary(HillDivLM_all)
coef(HillDivLM_all)
car::vif(HillDivLM_all)
# Plot results of the complete linear regression model
par(mfrow = c(2, 2))
plot(HillDivLM_all)
# Obtain predicted values and residuals, and some tests
HillDivLM_all_residual <- residuals(HillDivLM_all)
HillDivLM_all_preds <- predict(HillDivLM_all)
pearson.test(HillDivLM_all_residual)
lillie.test(HillDivLM_all_residual)
lmtest::bptest(HillDivLM_all)
search <- step(HillDivLM_all, ~.^2)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(HillDivLM_all_residual ~ HillDivLM_all_preds, xlab = "Predicted Values",  ylab = "Residuals")
# Select the best model: stepwise, backwise and both of them with stepAIC function
HillDivLM_all_best_model <- stepAIC(HillDivLM_all, direction = c("both", "backward", "forward"))
# Test null model of linear model
HillDiv_nullLM <- lm(Hill_Diversity ~ 1, data = df_var)
summary(HillDiv_nullLM)
stepAIC(HillDiv_nullLM)
# Run the generalized linear model with FDis ~ Cnratio + PCA1_temp + AGC
HillDivGLM_all <- glm(Hill_Diversity ~ Cnratio + PCA1_temp + AGC, data = df_var,
family = gaussian())
summary(HillDivGLM_all)
# Plot results of the complete general linear regression model
par(mfrow = c(2, 2))
plot(HillDivGLM_all)
# Obtain predicted values and residuals, and some tests
residuals_HillDivglm <- residuals(HillDivGLM_all)
preds_HillDivglm <- predict(HillDivGLM_all)
pearson.test(residuals_HillDivglm)
lillie.test(residuals_HillDivglm)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(residuals_HillDivglm ~ preds_HillDivglm, xlab = "Predicted Values",  ylab = "Residuals")
#Select the best model: stepwise, backwise and both of them with glmulti function
HillDiv_glmulti = glmulti(Hill_Diversity ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "glm")
# Obtain the best models (aic + 2)
best_models5_glm = weightable(HillDiv_glmulti)
best_models5_glm = best_models5_glm[best_models5_glm$aic <= min(best_models5_glm$aic) + 2,]
best_models5_glm
# Check the best model to obtain beta, SE, and p value
summary(HillDiv_glmulti@objects[[1]])
# Run the complete model
HillDivLM_all <- lm(Hill_Diversity ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC, data = df_var)
# Check the adjustment of the complete model
summary(HillDivLM_all)
coef(HillDivLM_all)
car::vif(HillDivLM_all)
# Plot results of the complete linear regression model
par(mfrow = c(2, 2))
plot(HillDivLM_all)
# Obtain predicted values and residuals, and some tests
HillDivLM_all_residual <- residuals(HillDivLM_all)
HillDivLM_all_preds <- predict(HillDivLM_all)
pearson.test(HillDivLM_all_residual)
lillie.test(HillDivLM_all_residual)
lmtest::bptest(HillDivLM_all)
search <- step(HillDivLM_all, ~.^2)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(HillDivLM_all_residual ~ HillDivLM_all_preds, xlab = "Predicted Values",
ylab = "Residuals")
# Select the best model: stepwise, backwise and both of them with stepAIC function
HillDivLM_all_best_model <- stepAIC(HillDivLM_all, direction = c("both",
"backward",
"forward"))
# Test null model of linear model
HillDiv_nullLM <- lm(Hill_Diversity ~ 1, data = df_var)
summary(HillDiv_nullLM)
stepAIC(HillDiv_nullLM)
# Run the generalized linear model with FDis ~ Cnratio + PCA1_temp + AGC
HillDivGLM_all <- glm(Hill_Diversity ~ Cnratio + PCA1_temp + AGC, data = df_var,
family = gaussian())
summary(HillDivGLM_all)
# Plot results of the complete general linear regression model
par(mfrow = c(2, 2))
plot(HillDivGLM_all)
# Obtain predicted values and residuals, and some tests
residuals_HillDivglm <- residuals(HillDivGLM_all)
preds_HillDivglm <- predict(HillDivGLM_all)
pearson.test(residuals_HillDivglm)
lillie.test(residuals_HillDivglm)
# Plot of predicted values vs residuals
par(mfrow = c(1, 1))
plot(residuals_HillDivglm ~ preds_HillDivglm, xlab = "Predicted Values",  ylab = "Residuals")
#Select the best model: stepwise, backwise and both of them with glmulti function
HillDiv_glmulti = glmulti(Hill_Diversity ~ Cnratio + Pmgkg + PCA1_temp + minDHr + AGC,
data = df_var, level = 1, method = "h", crit = "aic",
confsetsize = 100, plotty = F, report = T,
fitfunction = "glm")
# Obtain the best models (aic + 2)
best_models5_glm = weightable(HillDiv_glmulti)
best_models5_glm = best_models5_glm[best_models5_glm$aic <= min(best_models5_glm$aic) + 2,]
# Check the best model to obtain beta, SE, and p value
summary(HillDiv_glmulti@objects[[1]])
bio<-read.csv("Data/Matriz_abundanciaFREC_plots.csv", h=T, sep = ";")
bio[is.na(bio)] <- 0
View(bio)
row.names(bio)<-bio$PLOT
bio[1] <- NULL
View(bio)
bio = as.matrix(bio)
head(bio)
class(bio)
library(vegan)
set.seed(2)
nmds <- metaMDS(bio, distance = "bray", k = 2)
plot(nmds)
treat = c(rep("Treatment1", 4), rep("Treatment2", 4), rep("Treatment3", 4), rep("Treatment4", 4))
orditorp(nmds, display = "sites", )
ordiellipse(nmds, groups = treat, draw = "polygon", col = "grey90", label = F)
bio_distmat <- vegdist(bio, method = "bray")
bio_distmat <- as.matrix(bio_distmat, labels = T)
nmds <- metaMDS(bio_distmat, distance = "bray", k = 2, maxit = 999, trymax = 500,
wascores = TRUE)
plot(nmds)
nmds
treat = c(rep("Treatment1", 4), rep("Treatment2", 4), rep("Treatment3", 4), rep("Treatment4", 4))
orditorp(nmds, display = "sites", )
ordiellipse(nmds, groups = treat, draw = "polygon", col = "grey90", label = F)
env0 <- read.csv("Data/20212704_MATRIZ_Thesis_final.csv")
View(env0)
env = subset(env0, select = c("PLOT", "Elevationmasl", "PCA1_temp", "PC1.p", "PC2.p"))
head(env)
#extract NMDS scores (x and y coordinates)
data.scores1 = as.data.frame(scores(nmds))
# Import libraries
library(mFD)
library(reshape2)
library(dplyr)
# Add a seed to obtain reproducible results.
# If you want the results to vary, turn off set.seed()
set.seed(1234)
# Load data
df_traits_orig <- read.csv("Data/20210810_MeanTraits_FD.csv",stringsAsFactors = TRUE)
traits_cat <- read.csv("Data/20211108_MeanTraits_CAT.csv",stringsAsFactors = TRUE)
# Add scientific names and plots as indices
rownames(df_traits_orig) <- df_traits_orig$Scientific_name_plot
# Delete unnecessary columns
df_traits <- df_traits_orig[,!colnames(df_traits_orig) %in% c('Plot','Scientific_name',
'Scientific_name_plot',
'BA', 'RC_BA')]
# Normalize values
df_traits <- df_traits %>% mutate_at(c("Ht2019","LA","SLA"),
~(scale(.) %>% as.vector))
# Reshape the original dataframe of basal area by plot and scientific names columns
sp_BA_plot <- dcast(df_traits_orig, Plot ~ Scientific_name_plot,
value.var = "RC_BA", sum)
# Add plots as indices of the matrix and delete the plots column
rownames(sp_BA_plot) <- sp_BA_plot$Plot
sp_BA_plot[1] <- NULL
# Convert dataframe into a matrix
sp_BA_plot <- as.matrix(sp_BA_plot)
# Summarizing data
# Species traits summary
traits_summ <- mFD::sp.tr.summary(
tr_cat     = traits_cat,
sp_tr      = df_traits,
stop_if_NA = FALSE)
traits_summ
# Summary of the plot by species dataframe:
asb_sp_traits_summ <- mFD::asb.sp.summary(asb_sp_w = sp_BA_plot)
asb_sp_traits_occ <- asb_sp_traits_summ$"asb_sp_occ"
asb_sp_traits_summ
asb_sp_traits_occ
# Compute distances between species based on functional traits
# This function returns a dist object with traits-based distances
# between all pairs of species
sp_dist_traits <- mFD::funct.dist(
sp_tr         = df_traits,
tr_cat        = traits_cat,
metric        = "euclidean",
scale_euclid  = "range",
weight_type   = "equal",
stop_if_NA    = TRUE)
# Compute multi-dimensional functional spaces and assess their quality
fspaces_quality_traits <- mFD::quality.fspaces(
sp_dist             = sp_dist_traits,
maxdim_pcoa         = 10,
deviation_weighting = "absolute",
fdist_scaling       = FALSE,
fdendro             = "average")
fspaces_quality_traits
# Show the quality metrics of space a data frame gathering for each space
# (in rows), values of quality metric(s) (in columns)
round(fspaces_quality_traits$"quality_fspaces", 3)
# Create a plot about the quality of the selected functional spaces
# This function generates a figure with three panels (in rows) for each selected
# functional space (in columns). Each column represents a functional space, the value
# of the quality metric is written on the top of each column. The x-axis of all panels
# represents trait-based distances. The y-axis is different for each row
# More info: https://cmlmagneville.github.io/mFD/articles/mFD_general_workflow.html#illustrating-the-quality-of-the-selected-functional-spaces
funct_sp_q_plot <- mFD::quality.fspaces.plot(
fspaces_quality            = fspaces_quality_traits,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
funct_sp_q_plot
# Test correlation between functional axes and traits
sp_faxes_coord_traits <- fspaces_quality_traits$"details_fspaces"$"sp_pc_coord"
Traits_faxes <- mFD::traits.faxes.cor(
sp_tr          = df_traits,
sp_faxes_coord = sp_faxes_coord_traits[ , c("PC1", "PC2", "PC3")],
plot           = TRUE)
Traits_faxes
# Store traits with significant effect
signif_traits <- Traits_faxes$"tr_faxes_stat"[which(Traits_faxes$"tr_faxes_stat"$"p.value" < 0.05), ]
# Create the functional space plot - PCoA axis
big_plot <- mFD::funct.space.plot(
sp_faxes_coord  = sp_faxes_coord_traits[ , c("PC1", "PC2", "PC3")],
faxes           = c("PC1", "PC2", "PC3"),
name_file       = NULL,
faxes_nm        = NULL,
range_faxes     = c(NA, NA),
color_bg        = "grey95",
color_pool      = "darkgreen",
fill_pool       = "white",
shape_pool      = 21,
size_pool       = 1,
plot_ch         = TRUE,
color_ch        = "black",
fill_ch         = "white",
alpha_ch        = 0.5,
plot_vertices   = TRUE,
color_vert      = "blueviolet",
fill_vert       = "blueviolet",
shape_vert      = 23,
size_vert       = 1,
plot_sp_nm      = NULL,
nm_size         = 3,
nm_color        = "black",
nm_fontface     = "plain",
check_input     = TRUE)
# Visualize the graph with all pairs of axes
big_plot$patchwork
# Calculate functional alpha diversity indices in a multidimensional space
alpha_fd_indices_traits <- mFD::alpha.fd.multidim(
sp_faxes_coord   = sp_faxes_coord_traits[ , c("PC1", "PC2", "PC3")],
asb_sp_w         = sp_BA_plot,
ind_vect         = c("fdis", "feve", "fric", "fdiv"),
scaling          = FALSE,
check_input      = TRUE,
details_returned = TRUE)
fd_ind_values_traits <- alpha_fd_indices_traits$"functional_diversity_indices"
details_list_traits <- alpha_fd_indices_traits$"details"
# Create a plot of the alpha functional indices for 2 assemblages (the highest
# and lowest plots by elevation) in a multidimensional space
plots_alpha <- mFD::alpha.multidim.plot(
output_alpha_fd_multidim = alpha_fd_indices_traits,
plot_asb_nm              = c("MAPI_02", "YANA_01"),
ind_nm                   = c("fdis", "feve", "fric", "fdiv"),
faxes                    = NULL,
faxes_nm                 = NULL,
range_faxes              = c(NA, NA),
color_bg                 = "grey95",
shape_sp                 = c(pool = 3, asb1 = 21, asb2 = 21),
size_sp                  = c(pool = 0.7, asb1 = 1, asb2 = 1),
color_sp                 = c(pool = NA, asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
color_vert               = c(pool = NA, asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
fill_sp                  = c(pool = NA, asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
fill_vert                = c(pool = NA, asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
color_ch                 = c(pool = NA, asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
fill_ch                  = c(pool = "white", asb1 = "#1F968BFF", asb2 = "#DCE319FF"),
alpha_ch                 = c(pool = 1, asb1 = 0.3, asb2 = 0.3),
shape_centroid_fdis      = c(asb1 = 22,  asb2 = 24),
size_sp_nm               = 3,
color_sp_nm              = "black",
plot_sp_nm               = NULL,
fontface_sp_nm           = "plain",
save_file                = FALSE,
check_input              = TRUE)
# Visualize plots
plots_alpha$"fric"$"patchwork"
plots_alpha$"fdis"$"patchwork"
# Generalization of Hill numbers for alpha functional diversity
Traits_gower <- mFD::funct.dist(
sp_tr         = df_traits,
tr_cat        = traits_cat,
metric        = "euclidean",
scale_euclid  = "noscale",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
traits_FD2mean <- mFD::alpha.fd.hill(
asb_sp_w = sp_BA_plot,
sp_dist  = Traits_gower,
tau      = "mean",
q        = 1)
traits_FD2mean
# Calculate functional beta diversity indices in a multidimensional space
beta_fd_indices_traits <- mFD::beta.fd.multidim(
sp_faxes_coord   = sp_faxes_coord_traits[ , c("PC1", "PC2", "PC3")],
asb_sp_occ       = asb_sp_traits_occ,
check_input      = TRUE,
beta_family      = c("Sorensen"),
details_returned = TRUE)
# Obtain beta div indices values for each pair of assemblages
beta_div_pairs <- beta_fd_indices_traits$"pairasb_fbd_indices"
# Obtain a list containing details such as inputs, vertices of the global
# pool and of each assemblage and FRic values for each assemblage
beta_div_details <- beta_fd_indices_traits$"details"
# Obtain a vector containing the FRic value for each assemblage
# retrieved through the details_beta list
beta_div_fric <- beta_fd_indices_traits$"details"$"asb_FRic"
# Obtain a list of vectors containing names of species being vertices of the
# convex hull for each assemblage retrieved through the details_beta list
beta_div_scient_names <- beta_div_beta_fd_indices_traits$"details"$"asb_vertices"
# Obtain a list of vectors containing names of species being vertices of the
# convex hull for each assemblage retrieved through the details_beta list
beta_div_scient_names <- beta_fd_indices_traits$"details"$"asb_vertices"
# Create a plot of the beta functional indices for 2 assemblages
# in a multidimensional space
beta_plot_traits <- mFD::beta.multidim.plot(
output_beta_fd_multidim = beta_fd_indices_traits,
plot_asb_nm             = c("CEDR_01", "RIBR_01"),
beta_family             = c("Sorensen"),
faxes                   = paste0("PC", 1:3),
name_file               = NULL,
faxes_nm                = NULL,
range_faxes             = c(NA, NA),
color_bg                = "grey95",
shape_sp                = c("pool" = 3.0, asb1 = 22, asb2 = 21),
size_sp                 = c("pool" = 0.8, asb1 =  1, asb2 =  1),
color_sp                = c("pool" = "grey50", asb1 = "blue", asb2 = "red"),
fill_sp                 = c("pool" = NA, asb1 = "white", asb2 = "white"),
fill_vert               = c("pool" = NA, asb1 = "blue", asb2 = "red"),
color_ch                = c("pool" = NA, asb1 = "blue", asb2 = "red"),
fill_ch                 = c("pool" = "white", asb1 = "blue", asb2 = "red"),
alpha_ch                = c("pool" = 1, asb1 = 0.3, asb2 = 0.3),
nm_size                 = 3,
nm_color                = "black",
nm_fontface             = "plain",
check_input             = TRUE)
# Visualize plots
beta_plot_traits$"patchwork"
